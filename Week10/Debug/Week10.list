
Week10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080045d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000110  080046e0  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080046e0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d072  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccc  00000000  00000000  0002d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001667a  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc87  00000000  00000000  00046cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e087  00000000  00000000  00053949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e19d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003758  00000000  00000000  000e1a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004490 	.word	0x08004490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08004490 	.word	0x08004490

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800058c:	b090      	sub	sp, #64	; 0x40
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fe0e 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 fa96 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fb96 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fb6a 	bl	8000c74 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80005a0:	f000 faf8 	bl	8000b94 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80005a4:	48c5      	ldr	r0, [pc, #788]	; (80008bc <main+0x334>)
 80005a6:	f001 fead 	bl	8002304 <HAL_TIM_Base_Start_IT>
  {
	  char temp[]="NOW LOADING... \r\nLAB9 is now operating \r\n\r\n";
 80005aa:	4bc5      	ldr	r3, [pc, #788]	; (80008c0 <main+0x338>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),2000);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe0c 	bl	80001e0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005d2:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <main+0x33c>)
 80005d4:	f002 fce1 	bl	8002f9a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(micros()-timestamp > (1000000/(2*frequency)) && Working)
 80005d8:	f000 fc02 	bl	8000de0 <micros>
 80005dc:	4bba      	ldr	r3, [pc, #744]	; (80008c8 <main+0x340>)
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ebb0 0802 	subs.w	r8, r0, r2
 80005e6:	eb61 0903 	sbc.w	r9, r1, r3
 80005ea:	4bb8      	ldr	r3, [pc, #736]	; (80008cc <main+0x344>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4ab7      	ldr	r2, [pc, #732]	; (80008d0 <main+0x348>)
 80005f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80005fc:	454b      	cmp	r3, r9
 80005fe:	bf08      	it	eq
 8000600:	4542      	cmpeq	r2, r8
 8000602:	d212      	bcs.n	800062a <main+0xa2>
 8000604:	4bb3      	ldr	r3, [pc, #716]	; (80008d4 <main+0x34c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00e      	beq.n	800062a <main+0xa2>
	  {
		  timestamp = micros();
 800060c:	f000 fbe8 	bl	8000de0 <micros>
 8000610:	4602      	mov	r2, r0
 8000612:	460b      	mov	r3, r1
 8000614:	49ac      	ldr	r1, [pc, #688]	; (80008c8 <main+0x340>)
 8000616:	e9c1 2300 	strd	r2, r3, [r1]
		  if(frequency != 0)
 800061a:	4bac      	ldr	r3, [pc, #688]	; (80008cc <main+0x344>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <main+0xa2>
		  {
			  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000622:	2120      	movs	r1, #32
 8000624:	48ac      	ldr	r0, [pc, #688]	; (80008d8 <main+0x350>)
 8000626:	f001 f98e 	bl	8001946 <HAL_GPIO_TogglePin>
		  }
	  }
	  if(Working == 0)
 800062a:	4baa      	ldr	r3, [pc, #680]	; (80008d4 <main+0x34c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d104      	bne.n	800063c <main+0xb4>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	48a8      	ldr	r0, [pc, #672]	; (80008d8 <main+0x350>)
 8000638:	f001 f96c 	bl	8001914 <HAL_GPIO_WritePin>
	  /*Method 1 Polling Mode*/

	  //UARTRecieveAndResponsePolling();

	  		/*Method 2 Interrupt Mode*/
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 800063c:	2220      	movs	r2, #32
 800063e:	49a7      	ldr	r1, [pc, #668]	; (80008dc <main+0x354>)
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <main+0x33c>)
 8000642:	f002 fd3c 	bl	80030be <HAL_UART_Receive_IT>

	  		/*Method 2 W/ 1 Char Received*/
	  int16_t inputchar = UARTRecieveIT();
 8000646:	f000 fbe5 	bl	8000e14 <UARTRecieveIT>
 800064a:	4603      	mov	r3, r0
 800064c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  if(inputchar!= -1)
 800064e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000656:	d015      	beq.n	8000684 <main+0xfc>
	  {

	  	sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n\r\n", inputchar);
 8000658:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800065c:	461a      	mov	r2, r3
 800065e:	49a0      	ldr	r1, [pc, #640]	; (80008e0 <main+0x358>)
 8000660:	48a0      	ldr	r0, [pc, #640]	; (80008e4 <main+0x35c>)
 8000662:	f003 fae7 	bl	8003c34 <siprintf>
	  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 2000);
 8000666:	489f      	ldr	r0, [pc, #636]	; (80008e4 <main+0x35c>)
 8000668:	f7ff fdba 	bl	80001e0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000674:	499b      	ldr	r1, [pc, #620]	; (80008e4 <main+0x35c>)
 8000676:	4893      	ldr	r0, [pc, #588]	; (80008c4 <main+0x33c>)
 8000678:	f002 fc8f 	bl	8002f9a <HAL_UART_Transmit>
	  	Input = 1;
 800067c:	4b9a      	ldr	r3, [pc, #616]	; (80008e8 <main+0x360>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e002      	b.n	800068a <main+0x102>
	  }
	  else
	  {
		  Input = 0;
 8000684:	4b98      	ldr	r3, [pc, #608]	; (80008e8 <main+0x360>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]

	  		/*This section just simmulate Work Load*/
	  //HAL_Delay(100);
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  switch(state)
 800068a:	4b98      	ldr	r3, [pc, #608]	; (80008ec <main+0x364>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3b30      	subs	r3, #48	; 0x30
 8000690:	2b03      	cmp	r3, #3
 8000692:	f200 81f6 	bhi.w	8000a82 <main+0x4fa>
 8000696:	a201      	add	r2, pc, #4	; (adr r2, 800069c <main+0x114>)
 8000698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069c:	080006ad 	.word	0x080006ad
 80006a0:	080006e3 	.word	0x080006e3
 80006a4:	08000761 	.word	0x08000761
 80006a8:	080009a9 	.word	0x080009a9
	  {
	  	  case '0': //0 start
	  	  {
	  		char temp[] = " 0. LED Control \r\n 1. Button Status\r\n\r\n";
 80006ac:	4b90      	ldr	r3, [pc, #576]	; (80008f0 <main+0x368>)
 80006ae:	1d3c      	adds	r4, r7, #4
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006be:	e884 0003 	stmia.w	r4, {r0, r1}
	  		HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),2000);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd8b 	bl	80001e0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006d4:	487b      	ldr	r0, [pc, #492]	; (80008c4 <main+0x33c>)
 80006d6:	f002 fc60 	bl	8002f9a <HAL_UART_Transmit>
	  		state = '1'; //1 selectMode
 80006da:	4b84      	ldr	r3, [pc, #528]	; (80008ec <main+0x364>)
 80006dc:	2231      	movs	r2, #49	; 0x31
 80006de:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  break;
 80006e0:	e1cf      	b.n	8000a82 <main+0x4fa>
	  	  case '1': //1 selectMode
	  	  {
	  		  switch(inputchar)
 80006e2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80006e6:	2b30      	cmp	r3, #48	; 0x30
 80006e8:	d002      	beq.n	80006f0 <main+0x168>
 80006ea:	2b31      	cmp	r3, #49	; 0x31
 80006ec:	d01d      	beq.n	800072a <main+0x1a2>
 80006ee:	e023      	b.n	8000738 <main+0x1b0>
	  		  {
	  		  	  case '0'://LED Control
	  		  	  {
	  		  		  char temp[] = " a. Speed up \r\n s. Speed down\r\n d. On/Off\r\n x. Back\r\n\r\n";
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <main+0x36c>)
 80006f2:	1d3c      	adds	r4, r7, #4
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000706:	e884 0003 	stmia.w	r4, {r0, r1}
	  		  		  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),2000);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd67 	bl	80001e0 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	1d39      	adds	r1, r7, #4
 8000718:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <main+0x33c>)
 800071e:	f002 fc3c 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  state = '2';//LED Control state
 8000722:	4b72      	ldr	r3, [pc, #456]	; (80008ec <main+0x364>)
 8000724:	2232      	movs	r2, #50	; 0x32
 8000726:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000728:	e019      	b.n	800075e <main+0x1d6>
	  		  	  }
	  		  	  case '1'://Button Status
	  		  	  {
	  		  		  state = '3';//Button Status state
 800072a:	4b70      	ldr	r3, [pc, #448]	; (80008ec <main+0x364>)
 800072c:	2233      	movs	r2, #51	; 0x33
 800072e:	701a      	strb	r2, [r3, #0]
	  		  		  firsttime = 0;
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <main+0x370>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	  		  		  break;
 8000736:	e012      	b.n	800075e <main+0x1d6>
	  		  	  }
	  		  	  default:
	  		  		  if(Input != 0)
 8000738:	4b6b      	ldr	r3, [pc, #428]	; (80008e8 <main+0x360>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00d      	beq.n	800075c <main+0x1d4>
	  		  		  {
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),2000);
 8000740:	486e      	ldr	r0, [pc, #440]	; (80008fc <main+0x374>)
 8000742:	f7ff fd4d 	bl	80001e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800074e:	496b      	ldr	r1, [pc, #428]	; (80008fc <main+0x374>)
 8000750:	485c      	ldr	r0, [pc, #368]	; (80008c4 <main+0x33c>)
 8000752:	f002 fc22 	bl	8002f9a <HAL_UART_Transmit>
	  		  			  state = '0';//start
 8000756:	4b65      	ldr	r3, [pc, #404]	; (80008ec <main+0x364>)
 8000758:	2230      	movs	r2, #48	; 0x30
 800075a:	701a      	strb	r2, [r3, #0]
	  		  		  }
	  		  		  break;
 800075c:	bf00      	nop
	  		  }
	  	  }
	  	  break;
 800075e:	e190      	b.n	8000a82 <main+0x4fa>
	  	  case '2'://LED Control state
	  	  {
	  		  switch(inputchar)
 8000760:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000764:	3b41      	subs	r3, #65	; 0x41
 8000766:	2b37      	cmp	r3, #55	; 0x37
 8000768:	f200 80f4 	bhi.w	8000954 <main+0x3cc>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <main+0x1ec>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000855 	.word	0x08000855
 8000778:	08000955 	.word	0x08000955
 800077c:	08000955 	.word	0x08000955
 8000780:	08000909 	.word	0x08000909
 8000784:	08000955 	.word	0x08000955
 8000788:	08000955 	.word	0x08000955
 800078c:	08000955 	.word	0x08000955
 8000790:	08000955 	.word	0x08000955
 8000794:	08000955 	.word	0x08000955
 8000798:	08000955 	.word	0x08000955
 800079c:	08000955 	.word	0x08000955
 80007a0:	08000955 	.word	0x08000955
 80007a4:	08000955 	.word	0x08000955
 80007a8:	08000955 	.word	0x08000955
 80007ac:	08000955 	.word	0x08000955
 80007b0:	08000955 	.word	0x08000955
 80007b4:	08000955 	.word	0x08000955
 80007b8:	08000955 	.word	0x08000955
 80007bc:	08000885 	.word	0x08000885
 80007c0:	08000955 	.word	0x08000955
 80007c4:	08000955 	.word	0x08000955
 80007c8:	08000955 	.word	0x08000955
 80007cc:	08000955 	.word	0x08000955
 80007d0:	0800094d 	.word	0x0800094d
 80007d4:	08000955 	.word	0x08000955
 80007d8:	08000955 	.word	0x08000955
 80007dc:	08000955 	.word	0x08000955
 80007e0:	08000955 	.word	0x08000955
 80007e4:	08000955 	.word	0x08000955
 80007e8:	08000955 	.word	0x08000955
 80007ec:	08000955 	.word	0x08000955
 80007f0:	08000955 	.word	0x08000955
 80007f4:	08000855 	.word	0x08000855
 80007f8:	08000955 	.word	0x08000955
 80007fc:	08000955 	.word	0x08000955
 8000800:	08000909 	.word	0x08000909
 8000804:	08000955 	.word	0x08000955
 8000808:	08000955 	.word	0x08000955
 800080c:	08000955 	.word	0x08000955
 8000810:	08000955 	.word	0x08000955
 8000814:	08000955 	.word	0x08000955
 8000818:	08000955 	.word	0x08000955
 800081c:	08000955 	.word	0x08000955
 8000820:	08000955 	.word	0x08000955
 8000824:	08000955 	.word	0x08000955
 8000828:	08000955 	.word	0x08000955
 800082c:	08000955 	.word	0x08000955
 8000830:	08000955 	.word	0x08000955
 8000834:	08000955 	.word	0x08000955
 8000838:	08000955 	.word	0x08000955
 800083c:	08000885 	.word	0x08000885
 8000840:	08000955 	.word	0x08000955
 8000844:	08000955 	.word	0x08000955
 8000848:	08000955 	.word	0x08000955
 800084c:	08000955 	.word	0x08000955
 8000850:	0800094d 	.word	0x0800094d
	  		  {
	  		  	  case 'a':
	  		  	  case 'A':
	  		  	  {
	  		  		  frequency += 1;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <main+0x344>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <main+0x344>)
 800085c:	6013      	str	r3, [r2, #0]
	  		  		  sprintf(Frequencyline, "Frequency is [%d] Hz\r\n\r\n", frequency);
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <main+0x344>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	4926      	ldr	r1, [pc, #152]	; (8000900 <main+0x378>)
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <main+0x37c>)
 8000868:	f003 f9e4 	bl	8003c34 <siprintf>
	  		  		  HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),2000);
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <main+0x37c>)
 800086e:	f7ff fcb7 	bl	80001e0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800087a:	4922      	ldr	r1, [pc, #136]	; (8000904 <main+0x37c>)
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main+0x33c>)
 800087e:	f002 fb8c 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  break;
 8000882:	e090      	b.n	80009a6 <main+0x41e>
	  		  	  }
	  		  	  break;
	  		  	  case 's':
	  		  	  case 'S':
	  		  	  {
	  		  		  if(frequency > 0)
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <main+0x344>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dd04      	ble.n	8000896 <main+0x30e>
	  		  		  {
		  		  		  frequency += -1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <main+0x344>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <main+0x344>)
 8000894:	6013      	str	r3, [r2, #0]
	  		  		  }
	  		  		  sprintf(Frequencyline, "Frequency is [%d] Hz\r\n\r\n", frequency);
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <main+0x344>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4918      	ldr	r1, [pc, #96]	; (8000900 <main+0x378>)
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <main+0x37c>)
 80008a0:	f003 f9c8 	bl	8003c34 <siprintf>
	  		  		  HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),2000);
 80008a4:	4817      	ldr	r0, [pc, #92]	; (8000904 <main+0x37c>)
 80008a6:	f7ff fc9b 	bl	80001e0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008b2:	4914      	ldr	r1, [pc, #80]	; (8000904 <main+0x37c>)
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <main+0x33c>)
 80008b6:	f002 fb70 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  break;
 80008ba:	e074      	b.n	80009a6 <main+0x41e>
 80008bc:	200001b8 	.word	0x200001b8
 80008c0:	080044dc 	.word	0x080044dc
 80008c4:	20000204 	.word	0x20000204
 80008c8:	20000198 	.word	0x20000198
 80008cc:	20000094 	.word	0x20000094
 80008d0:	000f4240 	.word	0x000f4240
 80008d4:	20000090 	.word	0x20000090
 80008d8:	40020000 	.word	0x40020000
 80008dc:	2000014c 	.word	0x2000014c
 80008e0:	080044a8 	.word	0x080044a8
 80008e4:	2000012c 	.word	0x2000012c
 80008e8:	2000018c 	.word	0x2000018c
 80008ec:	2000007e 	.word	0x2000007e
 80008f0:	08004508 	.word	0x08004508
 80008f4:	08004530 	.word	0x08004530
 80008f8:	20000190 	.word	0x20000190
 80008fc:	20000080 	.word	0x20000080
 8000900:	080044c0 	.word	0x080044c0
 8000904:	2000016c 	.word	0x2000016c
	  		  	  }
	  		  	  break;
	  		  	  case 'd':
	  		  	  case 'D':
	  		  	  {
	  		  		  if(Working)
 8000908:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <main+0x504>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <main+0x3a6>
	  		  		  {
	  		  			  Working = 0;
 8000910:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <main+0x504>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)off, strlen(off),2000);
 8000916:	485e      	ldr	r0, [pc, #376]	; (8000a90 <main+0x508>)
 8000918:	f7ff fc62 	bl	80001e0 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	b29a      	uxth	r2, r3
 8000920:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000924:	495a      	ldr	r1, [pc, #360]	; (8000a90 <main+0x508>)
 8000926:	485b      	ldr	r0, [pc, #364]	; (8000a94 <main+0x50c>)
 8000928:	f002 fb37 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  else
	  		  		  {
	  		  			  Working = 1;
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)on, strlen(on),2000);
	  		  		  }
	  		  		  break;
 800092c:	e03b      	b.n	80009a6 <main+0x41e>
	  		  			  Working = 1;
 800092e:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <main+0x504>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)on, strlen(on),2000);
 8000934:	4858      	ldr	r0, [pc, #352]	; (8000a98 <main+0x510>)
 8000936:	f7ff fc53 	bl	80001e0 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000942:	4955      	ldr	r1, [pc, #340]	; (8000a98 <main+0x510>)
 8000944:	4853      	ldr	r0, [pc, #332]	; (8000a94 <main+0x50c>)
 8000946:	f002 fb28 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  break;
 800094a:	e02c      	b.n	80009a6 <main+0x41e>
	   		  	  }
	  		  	  break;
	  		  	  case 'x':
	  		  	  case 'X':
	  		  	  {
	  		  		  state = '0';//start
 800094c:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <main+0x514>)
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000952:	e028      	b.n	80009a6 <main+0x41e>
	  		  	  }
	  		  	  default:
	  		  		  if(Input != 0)
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <main+0x518>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d023      	beq.n	80009a4 <main+0x41c>
	  		  		  {
	  		  			  char temp[] = " a. Speed up \r\n s. Speed down\r\n d. On/Off\r\n x. Back\r\n\r\n";
 800095c:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <main+0x51c>)
 800095e:	1d3c      	adds	r4, r7, #4
 8000960:	461d      	mov	r5, r3
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000972:	e884 0003 	stmia.w	r4, {r0, r1}
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),2000);
 8000976:	484c      	ldr	r0, [pc, #304]	; (8000aa8 <main+0x520>)
 8000978:	f7ff fc32 	bl	80001e0 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000984:	4948      	ldr	r1, [pc, #288]	; (8000aa8 <main+0x520>)
 8000986:	4843      	ldr	r0, [pc, #268]	; (8000a94 <main+0x50c>)
 8000988:	f002 fb07 	bl	8002f9a <HAL_UART_Transmit>
	  		  			  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),2000);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc26 	bl	80001e0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800099e:	483d      	ldr	r0, [pc, #244]	; (8000a94 <main+0x50c>)
 80009a0:	f002 fafb 	bl	8002f9a <HAL_UART_Transmit>
	  		  		  }
	  		  		  break;
 80009a4:	bf00      	nop
	  		  }
	  	  }
	  	  break;
 80009a6:	e06c      	b.n	8000a82 <main+0x4fa>
	  	  case '3'://Button Status state
	  	  {
	  		  User_Button[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	483f      	ldr	r0, [pc, #252]	; (8000aac <main+0x524>)
 80009ae:	f000 ff99 	bl	80018e4 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <main+0x528>)
 80009b8:	701a      	strb	r2, [r3, #0]
	  		  if(User_Button[1] != User_Button[0])
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <main+0x528>)
 80009bc:	785a      	ldrb	r2, [r3, #1]
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <main+0x528>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d002      	beq.n	80009cc <main+0x444>
	  		  {
	  			  firsttime = 0;
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <main+0x52c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
	  		  }
	  		  User_Button[1] = User_Button[0];
 80009cc:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <main+0x528>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <main+0x528>)
 80009d2:	705a      	strb	r2, [r3, #1]
	  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && firsttime == 0)
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	4834      	ldr	r0, [pc, #208]	; (8000aac <main+0x524>)
 80009da:	f000 ff83 	bl	80018e4 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d114      	bne.n	8000a0e <main+0x486>
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <main+0x52c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d110      	bne.n	8000a0e <main+0x486>
	  		  {
	  			  HAL_UART_Transmit(&huart2, (uint8_t*)button, strlen(button),2000);
 80009ec:	4832      	ldr	r0, [pc, #200]	; (8000ab8 <main+0x530>)
 80009ee:	f7ff fbf7 	bl	80001e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009fa:	492f      	ldr	r1, [pc, #188]	; (8000ab8 <main+0x530>)
 80009fc:	4825      	ldr	r0, [pc, #148]	; (8000a94 <main+0x50c>)
 80009fe:	f002 facc 	bl	8002f9a <HAL_UART_Transmit>
	  			  firsttime += 1;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <main+0x52c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <main+0x52c>)
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e01b      	b.n	8000a46 <main+0x4be>
	  		  }
	  		  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && firsttime == 0)
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <main+0x524>)
 8000a14:	f000 ff66 	bl	80018e4 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d113      	bne.n	8000a46 <main+0x4be>
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <main+0x52c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10f      	bne.n	8000a46 <main+0x4be>
	  		  {
	  			  HAL_UART_Transmit(&huart2, (uint8_t*)unbutton, strlen(unbutton),2000);
 8000a26:	4825      	ldr	r0, [pc, #148]	; (8000abc <main+0x534>)
 8000a28:	f7ff fbda 	bl	80001e0 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <main+0x534>)
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <main+0x50c>)
 8000a38:	f002 faaf 	bl	8002f9a <HAL_UART_Transmit>
	  			  firsttime += 1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <main+0x52c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <main+0x52c>)
 8000a44:	6013      	str	r3, [r2, #0]
	  		  }
	  		  switch(inputchar)
 8000a46:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a4a:	2b58      	cmp	r3, #88	; 0x58
 8000a4c:	d001      	beq.n	8000a52 <main+0x4ca>
 8000a4e:	2b78      	cmp	r3, #120	; 0x78
 8000a50:	d103      	bne.n	8000a5a <main+0x4d2>
	  		  {
				case 'x':
				case 'X':
	  			{
	  				state = '0';//start
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <main+0x514>)
 8000a54:	2230      	movs	r2, #48	; 0x30
 8000a56:	701a      	strb	r2, [r3, #0]
	  				break;
 8000a58:	e012      	b.n	8000a80 <main+0x4f8>
	  			}
	  			default:
	  				if(Input != 0)
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <main+0x518>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00d      	beq.n	8000a7e <main+0x4f6>
	  				{
	  					HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),2000);
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <main+0x520>)
 8000a64:	f7ff fbbc 	bl	80001e0 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a70:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <main+0x520>)
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <main+0x50c>)
 8000a74:	f002 fa91 	bl	8002f9a <HAL_UART_Transmit>
	  					firsttime = 0;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <main+0x52c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	  				}
	  				break;
 8000a7e:	bf00      	nop
	  		  }
	  	  }
	  	  break;
 8000a80:	bf00      	nop
//	  	  }
//	  	  break;

	  }

	  lastinputchar = inputchar;
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <main+0x538>)
 8000a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a86:	8013      	strh	r3, [r2, #0]
  {
 8000a88:	e5a6      	b.n	80005d8 <main+0x50>
 8000a8a:	bf00      	nop
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	20000048 	.word	0x20000048
 8000a94:	20000204 	.word	0x20000204
 8000a98:	20000064 	.word	0x20000064
 8000a9c:	2000007e 	.word	0x2000007e
 8000aa0:	2000018c 	.word	0x2000018c
 8000aa4:	08004530 	.word	0x08004530
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	20000200 	.word	0x20000200
 8000ab4:	20000190 	.word	0x20000190
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000024 	.word	0x20000024
 8000ac0:	20000098 	.word	0x20000098

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f8a6 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <SystemClock_Config+0xc8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <SystemClock_Config+0xc8>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <SystemClock_Config+0xc8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <SystemClock_Config+0xcc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b38:	2364      	movs	r3, #100	; 0x64
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 ff17 	bl	800197c <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f000 f9ae 	bl	8000eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2103      	movs	r1, #3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f979 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b80:	f000 f998 	bl	8000eb4 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3750      	adds	r7, #80	; 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <MX_TIM5_Init+0xdc>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000bc6:	2263      	movs	r2, #99	; 0x63
 8000bc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000be6:	f001 fb3d 	bl	8002264 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 f960 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000c02:	f001 fdd6 	bl	80027b2 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 f952 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000c12:	f001 fbd9 	bl	80023c8 <HAL_TIM_IC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f94a 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000c30:	f002 f8e4 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8000c3a:	f000 f93b 	bl	8000eb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_TIM5_Init+0xd8>)
 8000c56:	f001 fd18 	bl	800268a <HAL_TIM_IC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000c60:	f000 f928 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200001b8 	.word	0x200001b8
 8000c70:	40000c00 	.word	0x40000c00

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f002 f928 	bl	8002f00 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8fd 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000204 	.word	0x20000204
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2c      	ldr	r2, [pc, #176]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_GPIO_Init+0xd4>)
 8000d54:	f000 fdde 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_GPIO_Init+0xd8>)
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_GPIO_Init+0xdc>)
 8000d6e:	f000 fc35 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d72:	2320      	movs	r3, #32
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_GPIO_Init+0xd4>)
 8000d8a:	f000 fc27 	bl	80015dc <HAL_GPIO_Init>

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	10210000 	.word	0x10210000
 8000da4:	40020800 	.word	0x40020800

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b4b0      	push	{r4, r5, r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d109      	bne.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f112 34ff 	adds.w	r4, r2, #4294967295
 8000dc2:	f143 0500 	adc.w	r5, r3, #0
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dc8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bcb0      	pop	{r4, r5, r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200001b8 	.word	0x200001b8
 8000ddc:	200001a0 	.word	0x200001a0

08000de0 <micros>:

uint64_t micros()
{
 8000de0:	b4b0      	push	{r4, r5, r7}
 8000de2:	af00      	add	r7, sp, #0
	return (_micros + htim5.Instance->CNT);//counter of Timer 5
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <micros+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	4618      	mov	r0, r3
 8000dec:	f04f 0100 	mov.w	r1, #0
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <micros+0x30>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	1884      	adds	r4, r0, r2
 8000df8:	eb41 0503 	adc.w	r5, r1, r3
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	462b      	mov	r3, r5
}
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bcb0      	pop	{r4, r5, r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001b8 	.word	0x200001b8
 8000e10:	200001a0 	.word	0x200001a0

08000e14 <UARTRecieveIT>:
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 2000);
//
//}

int16_t UARTRecieveIT()
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1e:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <UARTRecieveIT+0x54>)
 8000e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <UARTRecieveIT+0x54>)
 8000e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <UARTRecieveIT+0x58>)
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d010      	beq.n	8000e58 <UARTRecieveIT+0x44>
	{
		data = RxDataBuffer[dataPos];
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <UARTRecieveIT+0x58>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <UARTRecieveIT+0x5c>)
 8000e3c:	5cd3      	ldrb	r3, [r2, r3]
 8000e3e:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <UARTRecieveIT+0x58>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <UARTRecieveIT+0x54>)
 8000e48:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e4e:	fb02 f201 	mul.w	r2, r2, r1
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <UARTRecieveIT+0x58>)
 8000e56:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000204 	.word	0x20000204
 8000e6c:	200001a8 	.word	0x200001a8
 8000e70:	2000014c 	.word	0x2000014c

08000e74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_UART_RxCpltCallback+0x30>)
 8000e7e:	490a      	ldr	r1, [pc, #40]	; (8000ea8 <HAL_UART_RxCpltCallback+0x34>)
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <HAL_UART_RxCpltCallback+0x38>)
 8000e82:	f002 fed7 	bl	8003c34 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 2000);
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_UART_RxCpltCallback+0x38>)
 8000e88:	f7ff f9aa 	bl	80001e0 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e94:	4905      	ldr	r1, [pc, #20]	; (8000eac <HAL_UART_RxCpltCallback+0x38>)
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <HAL_UART_RxCpltCallback+0x3c>)
 8000e98:	f002 f87f 	bl	8002f9a <HAL_UART_Transmit>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000014c 	.word	0x2000014c
 8000ea8:	08004568 	.word	0x08004568
 8000eac:	2000012c 	.word	0x2000012c
 8000eb0:	20000204 	.word	0x20000204

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 fa98 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <HAL_TIM_Base_MspInit+0x94>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d133      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_Base_MspInit+0x98>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <HAL_TIM_Base_MspInit+0x9c>)
 8000f86:	f000 fb29 	bl	80015dc <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f000 fa5b 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f94:	2032      	movs	r0, #50	; 0x32
 8000f96:	f000 fa74 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40000c00 	.word	0x40000c00
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_UART_MspInit+0x94>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d133      	bne.n	800103a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_UART_MspInit+0x98>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_UART_MspInit+0x98>)
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x98>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_UART_MspInit+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x98>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_UART_MspInit+0x98>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800100a:	230c      	movs	r3, #12
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_UART_MspInit+0x9c>)
 8001026:	f000 fad9 	bl	80015dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2026      	movs	r0, #38	; 0x26
 8001030:	f000 fa0b 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001034:	2026      	movs	r0, #38	; 0x26
 8001036:	f000 fa24 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8da 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USART2_IRQHandler+0x10>)
 80010aa:	f002 f839 	bl	8003120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000204 	.word	0x20000204

080010b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM5_IRQHandler+0x10>)
 80010be:	f001 f9dc 	bl	800247a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001b8 	.word	0x200001b8

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f002 fd68 	bl	8003bd0 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20020000 	.word	0x20020000
 800112c:	00000400 	.word	0x00000400
 8001130:	200001ac 	.word	0x200001ac
 8001134:	20000260 	.word	0x20000260

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f002 fd27 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f9fb 	bl	8000588 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80011a0:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 80011a4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80011a8:	2000025c 	.word	0x2000025c

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f92b 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fe6c 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f943 	bl	800149e <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f90b 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000009c 	.word	0x2000009c
 800124c:	200000a4 	.word	0x200000a4
 8001250:	200000a0 	.word	0x200000a0

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200000a4 	.word	0x200000a4
 8001278:	20000248 	.word	0x20000248

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000248 	.word	0x20000248

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff feda 	bl	800127c <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d008      	beq.n	80014e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e052      	b.n	800158e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0216 	bic.w	r2, r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001506:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <HAL_DMA_Abort+0x62>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0208 	bic.w	r2, r2, #8
 8001526:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	e013      	b.n	8001562 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153a:	f7ff fe9f 	bl	800127c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b05      	cmp	r3, #5
 8001546:	d90c      	bls.n	8001562 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2203      	movs	r2, #3
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e015      	b.n	800158e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e4      	bne.n	800153a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	223f      	movs	r2, #63	; 0x3f
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d004      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e00c      	b.n	80015ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e159      	b.n	80018ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8148 	bne.w	80018a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d005      	beq.n	800162e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	2b02      	cmp	r3, #2
 800162c:	d130      	bne.n	8001690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b03      	cmp	r3, #3
 800169a:	d017      	beq.n	80016cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d123      	bne.n	8001720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0203 	and.w	r2, r3, #3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a2 	beq.w	80018a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_GPIO_Init+0x2e8>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <HAL_GPIO_Init+0x2e8>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <HAL_GPIO_Init+0x2e8>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_GPIO_Init+0x2ec>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_Init+0x202>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0x1fe>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a47      	ldr	r2, [pc, #284]	; (80018d4 <HAL_GPIO_Init+0x2f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a46      	ldr	r2, [pc, #280]	; (80018d8 <HAL_GPIO_Init+0x2fc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_Init+0x1f6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <HAL_GPIO_Init+0x300>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x1f2>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x2ec>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_GPIO_Init+0x304>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001822:	4a2f      	ldr	r2, [pc, #188]	; (80018e0 <HAL_GPIO_Init+0x304>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_GPIO_Init+0x304>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184c:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_GPIO_Init+0x304>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_GPIO_Init+0x304>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HAL_GPIO_Init+0x304>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_GPIO_Init+0x304>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f aea2 	bls.w	80015f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	041a      	lsls	r2, r3, #16
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43d9      	mvns	r1, r3
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	400b      	ands	r3, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e264      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d075      	beq.n	8001a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d00c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d05b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x108>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d157      	bne.n	8001a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e23f      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x74>
 80019e2:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a8a      	ldr	r2, [pc, #552]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a87      	ldr	r2, [pc, #540]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 8001a14:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a83      	ldr	r2, [pc, #524]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a80      	ldr	r2, [pc, #512]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc22 	bl	800127c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fc1e 	bl	800127c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e204      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xc0>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc0e 	bl	800127c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc0a 	bl	800127c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1f0      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0xe8>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1c4      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4952      	ldr	r1, [pc, #328]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	e03a      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_RCC_OscConfig+0x2b0>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fbc3 	bl	800127c <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fbbf 	bl	800127c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1a5      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4940      	ldr	r1, [pc, #256]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
 8001b2c:	e015      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_OscConfig+0x2b0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fba2 	bl	800127c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fb9e 	bl	800127c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e184      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d030      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d016      	beq.n	8001b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_RCC_OscConfig+0x2b4>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fb82 	bl	800127c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fb7e 	bl	800127c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e164      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x200>
 8001b9a:	e015      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x2b4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb6b 	bl	800127c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff fb67 	bl	800127c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e14d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a0 	beq.w	8001d16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x2b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_RCC_OscConfig+0x2b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_RCC_OscConfig+0x2b8>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb2d 	bl	800127c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	e011      	b.n	8001c4a <HAL_RCC_OscConfig+0x2ce>
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	42470000 	.word	0x42470000
 8001c30:	42470e80 	.word	0x42470e80
 8001c34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff fb20 	bl	800127c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e106      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <HAL_RCC_OscConfig+0x4e4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a80      	ldr	r2, [pc, #512]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e01c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x32a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x312>
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a7a      	ldr	r2, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a77      	ldr	r2, [pc, #476]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x32a>
 8001c8e:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a74      	ldr	r2, [pc, #464]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a71      	ldr	r2, [pc, #452]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fae5 	bl	800127c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fae1 	bl	800127c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0c5      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x33a>
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff facf 	bl	800127c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff facb 	bl	800127c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0af      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a55      	ldr	r2, [pc, #340]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 809b 	beq.w	8001e56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d05c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d141      	bne.n	8001db8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x4ec>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fa9f 	bl	800127c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff fa9b 	bl	800127c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e081      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	019b      	lsls	r3, r3, #6
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	4937      	ldr	r1, [pc, #220]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_RCC_OscConfig+0x4ec>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa74 	bl	800127c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa70 	bl	800127c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e056      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x41c>
 8001db6:	e04e      	b.n	8001e56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_OscConfig+0x4ec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa5d 	bl	800127c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fa59 	bl	800127c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e03f      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x44a>
 8001de4:	e037      	b.n	8001e56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e032      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_RCC_OscConfig+0x4e8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d028      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d11a      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40007000 	.word	0x40007000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470060 	.word	0x42470060

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cc      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b65      	ldr	r3, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d044      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e067      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4934      	ldr	r1, [pc, #208]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f98e 	bl	800127c <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff f98a 	bl	800127c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f8ee 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	08004578 	.word	0x08004578
 8002030:	2000009c 	.word	0x2000009c
 8002034:	200000a0 	.word	0x200000a0

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002050:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d00d      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 800205c:	2b08      	cmp	r3, #8
 800205e:	f200 80bd 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x34>
 8002066:	2b04      	cmp	r3, #4
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x3a>
 800206a:	e0b7      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800206e:	60bb      	str	r3, [r7, #8]
       break;
 8002070:	e0b7      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002074:	60bb      	str	r3, [r7, #8]
      break;
 8002076:	e0b4      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002078:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002080:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04d      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208e:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	461a      	mov	r2, r3
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	ea02 0800 	and.w	r8, r2, r0
 80020a6:	ea03 0901 	and.w	r9, r3, r1
 80020aa:	4640      	mov	r0, r8
 80020ac:	4649      	mov	r1, r9
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	014b      	lsls	r3, r1, #5
 80020b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020bc:	0142      	lsls	r2, r0, #5
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	ebb0 0008 	subs.w	r0, r0, r8
 80020c6:	eb61 0109 	sbc.w	r1, r1, r9
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020d8:	0182      	lsls	r2, r0, #6
 80020da:	1a12      	subs	r2, r2, r0
 80020dc:	eb63 0301 	sbc.w	r3, r3, r1
 80020e0:	f04f 0000 	mov.w	r0, #0
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	00d9      	lsls	r1, r3, #3
 80020ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ee:	00d0      	lsls	r0, r2, #3
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	eb12 0208 	adds.w	r2, r2, r8
 80020f8:	eb43 0309 	adc.w	r3, r3, r9
 80020fc:	f04f 0000 	mov.w	r0, #0
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	0259      	lsls	r1, r3, #9
 8002106:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800210a:	0250      	lsls	r0, r2, #9
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f7fe f8b8 	bl	8000290 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e04a      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	461a      	mov	r2, r3
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	ea02 0400 	and.w	r4, r2, r0
 8002142:	ea03 0501 	and.w	r5, r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	014b      	lsls	r3, r1, #5
 8002154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002158:	0142      	lsls	r2, r0, #5
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	1b00      	subs	r0, r0, r4
 8002160:	eb61 0105 	sbc.w	r1, r1, r5
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	018b      	lsls	r3, r1, #6
 800216e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002172:	0182      	lsls	r2, r0, #6
 8002174:	1a12      	subs	r2, r2, r0
 8002176:	eb63 0301 	sbc.w	r3, r3, r1
 800217a:	f04f 0000 	mov.w	r0, #0
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	00d9      	lsls	r1, r3, #3
 8002184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002188:	00d0      	lsls	r0, r2, #3
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	1912      	adds	r2, r2, r4
 8002190:	eb45 0303 	adc.w	r3, r5, r3
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f04f 0100 	mov.w	r1, #0
 800219c:	0299      	lsls	r1, r3, #10
 800219e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021a2:	0290      	lsls	r0, r2, #10
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	f7fe f86c 	bl	8000290 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	60bb      	str	r3, [r7, #8]
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021de:	60bb      	str	r3, [r7, #8]
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	68bb      	ldr	r3, [r7, #8]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000009c 	.word	0x2000009c

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08004588 	.word	0x08004588

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08004588 	.word	0x08004588

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fe40 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fb72 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e044      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d018      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x6c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d013      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x6c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x6c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_TIM_Base_Start_IT+0xb8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x6c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x6c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d010      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	e007      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40014000 	.word	0x40014000

080023c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f839 	bl	8002466 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 fac0 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d122      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d11b      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0202 	mvn.w	r2, #2
 80024a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa46 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 80024c2:	e005      	b.n	80024d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fa38 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa49 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d122      	bne.n	800252a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d11b      	bne.n	800252a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f06f 0204 	mvn.w	r2, #4
 80024fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa1c 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 8002516:	e005      	b.n	8002524 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa0e 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa1f 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d122      	bne.n	800257e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11b      	bne.n	800257e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f06f 0208 	mvn.w	r2, #8
 800254e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2204      	movs	r2, #4
 8002554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f9f2 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 800256a:	e005      	b.n	8002578 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f9e4 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9f5 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d122      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d11b      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0210 	mvn.w	r2, #16
 80025a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2208      	movs	r2, #8
 80025a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f9c8 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 80025be:	e005      	b.n	80025cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f9ba 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f9cb 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10e      	bne.n	80025fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0201 	mvn.w	r2, #1
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fbd5 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d10e      	bne.n	800262a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d107      	bne.n	800262a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fc61 	bl	8002eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d10e      	bne.n	8002656 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d107      	bne.n	8002656 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800264e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f990 	bl	8002976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d10e      	bne.n	8002682 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d107      	bne.n	8002682 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f06f 0220 	mvn.w	r2, #32
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fc2b 	bl	8002ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e082      	b.n	80027aa <HAL_TIM_IC_ConfigChannel+0x120>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11b      	bne.n	80026ea <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f000 f9e3 	bl	8002a8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 020c 	bic.w	r2, r2, #12
 80026d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6999      	ldr	r1, [r3, #24]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	e05a      	b.n	80027a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11c      	bne.n	800272a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6819      	ldr	r1, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f000 fa5b 	bl	8002bba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002712:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	021a      	lsls	r2, r3, #8
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
 8002728:	e03a      	b.n	80027a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f000 faa8 	bl	8002c94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020c 	bic.w	r2, r2, #12
 8002752:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69d9      	ldr	r1, [r3, #28]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	e01b      	b.n	80027a0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f000 fac8 	bl	8002d0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800278a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69d9      	ldr	r1, [r3, #28]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_ConfigClockSource+0x18>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0b3      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x180>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	d03e      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0xd0>
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	f200 8087 	bhi.w	800291a <HAL_TIM_ConfigClockSource+0x168>
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002810:	f000 8085 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	d87f      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 800281a:	2b70      	cmp	r3, #112	; 0x70
 800281c:	d01a      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0xa2>
 800281e:	2b70      	cmp	r3, #112	; 0x70
 8002820:	d87b      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 8002822:	2b60      	cmp	r3, #96	; 0x60
 8002824:	d050      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0x116>
 8002826:	2b60      	cmp	r3, #96	; 0x60
 8002828:	d877      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 800282a:	2b50      	cmp	r3, #80	; 0x50
 800282c:	d03c      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xf6>
 800282e:	2b50      	cmp	r3, #80	; 0x50
 8002830:	d873      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d058      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x136>
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d86f      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d064      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x156>
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d86b      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 8002842:	2b20      	cmp	r3, #32
 8002844:	d060      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x156>
 8002846:	2b20      	cmp	r3, #32
 8002848:	d867      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x168>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d05c      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x156>
 800284e:	2b10      	cmp	r3, #16
 8002850:	d05a      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002852:	e062      	b.n	800291a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f000 faaa 	bl	8002dbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002876:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
      break;
 8002880:	e04e      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f000 fa93 	bl	8002dbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e03b      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	461a      	mov	r2, r3
 80028b6:	f000 f951 	bl	8002b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2150      	movs	r1, #80	; 0x50
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fa60 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 80028c6:	e02b      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f000 f9ad 	bl	8002c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2160      	movs	r1, #96	; 0x60
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa50 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 80028e6:	e01b      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f000 f931 	bl	8002b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2140      	movs	r1, #64	; 0x40
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fa40 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002906:	e00b      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fa37 	bl	8002d86 <TIM_ITRx_SetConfig>
        break;
 8002918:	e002      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800291e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <TIM_Base_SetConfig+0xe4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00f      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <TIM_Base_SetConfig+0xe8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <TIM_Base_SetConfig+0xec>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <TIM_Base_SetConfig+0xf0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <TIM_Base_SetConfig+0xe4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01b      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d017      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <TIM_Base_SetConfig+0xe8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <TIM_Base_SetConfig+0xec>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00f      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <TIM_Base_SetConfig+0xf0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <TIM_Base_SetConfig+0xf4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <TIM_Base_SetConfig+0xf8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <TIM_Base_SetConfig+0xfc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <TIM_Base_SetConfig+0xe4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800

08002a8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f023 0201 	bic.w	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <TIM_TI1_SetConfig+0xbc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <TIM_TI1_SetConfig+0x56>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d00f      	beq.n	8002ae2 <TIM_TI1_SetConfig+0x56>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <TIM_TI1_SetConfig+0xc0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_TI1_SetConfig+0x56>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <TIM_TI1_SetConfig+0xc4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_TI1_SetConfig+0x56>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <TIM_TI1_SetConfig+0xc8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_TI1_SetConfig+0x56>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <TIM_TI1_SetConfig+0xcc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <TIM_TI1_SetConfig+0x5a>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <TIM_TI1_SetConfig+0x5c>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e003      	b.n	8002b06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f023 030a 	bic.w	r3, r3, #10
 8002b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 030a 	and.w	r3, r3, #10
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40000c00 	.word	0x40000c00
 8002b58:	40014000 	.word	0x40014000

08002b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f023 0201 	bic.w	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 030a 	bic.w	r3, r3, #10
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f023 0210 	bic.w	r2, r3, #16
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	031b      	lsls	r3, r3, #12
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f023 0210 	bic.w	r2, r3, #16
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	031b      	lsls	r3, r3, #12
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f023 0303 	bic.w	r3, r3, #3
 8002cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f043 0307 	orr.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e050      	b.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d018      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d013      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40014000 	.word	0x40014000

08002ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03f      	b.n	8002f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f842 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fc7b 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d17c      	bne.n	80030b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_UART_Transmit+0x2c>
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e075      	b.n	80030b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Transmit+0x3e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e06e      	b.n	80030b6 <HAL_UART_Transmit+0x11c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2221      	movs	r2, #33	; 0x21
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fee:	f7fe f945 	bl	800127c <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d108      	bne.n	800301c <HAL_UART_Transmit+0x82>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d104      	bne.n	800301c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	e003      	b.n	8003024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800302c:	e02a      	b.n	8003084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fa3d 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e036      	b.n	80030b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3302      	adds	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e007      	b.n	8003076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1cf      	bne.n	800302e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa0d 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e006      	b.n	80030b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d11d      	bne.n	8003114 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Receive_IT+0x26>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e016      	b.n	8003116 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Receive_IT+0x38>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e00f      	b.n	8003116 <HAL_UART_Receive_IT+0x58>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	461a      	mov	r2, r3
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa1e 	bl	800354c <UART_Start_Receive_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	e000      	b.n	8003116 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_UART_IRQHandler+0x52>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fad1 	bl	8003712 <UART_Receive_IT>
      return;
 8003170:	e17c      	b.n	800346c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80b1 	beq.w	80032dc <HAL_UART_IRQHandler+0x1bc>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_UART_IRQHandler+0x70>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a6 	beq.w	80032dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_UART_IRQHandler+0x90>
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_UART_IRQHandler+0xb0>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0202 	orr.w	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_UART_IRQHandler+0xd0>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00f      	beq.n	800321a <HAL_UART_IRQHandler+0xfa>
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_UART_IRQHandler+0xee>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 811f 	beq.w	8003462 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_UART_IRQHandler+0x11e>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fa6a 	bl	8003712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_UART_IRQHandler+0x146>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d031      	beq.n	80032ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f9aa 	bl	80035c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d123      	bne.n	80032c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_UART_IRQHandler+0x354>)
 8003298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f979 	bl	8001596 <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00e      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8e6 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00a      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8e2 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e006      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8de 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032d6:	e0c4      	b.n	8003462 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	bf00      	nop
    return;
 80032da:	e0c2      	b.n	8003462 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80a2 	bne.w	800342a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 809c 	beq.w	800342a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8096 	beq.w	800342a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d14f      	bne.n	80033c2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800332c:	8a3b      	ldrh	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8099 	beq.w	8003466 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003338:	8a3a      	ldrh	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	f080 8093 	bcs.w	8003466 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8a3a      	ldrh	r2, [r7, #16]
 8003344:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003350:	d02b      	beq.n	80033aa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003360:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0210 	bic.w	r2, r2, #16
 800339e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe f886 	bl	80014b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f870 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033c0:	e051      	b.n	8003466 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d047      	beq.n	800346a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80033da:	8a7b      	ldrh	r3, [r7, #18]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d044      	beq.n	800346a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0210 	bic.w	r2, r2, #16
 800341c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341e:	8a7b      	ldrh	r3, [r7, #18]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f83c 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003428:	e01f      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_UART_IRQHandler+0x326>
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8ff 	bl	8003642 <UART_Transmit_IT>
    return;
 8003444:	e012      	b.n	800346c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_UART_IRQHandler+0x34c>
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f941 	bl	80036e2 <UART_EndTransmit_IT>
    return;
 8003460:	e004      	b.n	800346c <HAL_UART_IRQHandler+0x34c>
    return;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_UART_IRQHandler+0x34c>
      return;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_UART_IRQHandler+0x34c>
      return;
 800346a:	bf00      	nop
  }
}
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	0800361b 	.word	0x0800361b

08003478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e02c      	b.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d028      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034d8:	f7fd fed0 	bl	800127c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d21d      	bcs.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e00f      	b.n	8003544 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d0c3      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2222      	movs	r2, #34	; 0x22
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003590:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0220 	orr.w	r2, r2, #32
 80035b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0210 	bic.w	r2, r2, #16
 80035fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ff29 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b21      	cmp	r3, #33	; 0x21
 8003654:	d13e      	bne.n	80036d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d114      	bne.n	800368a <UART_Transmit_IT+0x48>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d110      	bne.n	800368a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]
 8003688:	e008      	b.n	800369c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6211      	str	r1, [r2, #32]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4619      	mov	r1, r3
 80036aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10f      	bne.n	80036d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff feb8 	bl	8003478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b22      	cmp	r3, #34	; 0x22
 8003724:	f040 8087 	bne.w	8003836 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d117      	bne.n	8003762 <UART_Receive_IT+0x50>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003750:	b29a      	uxth	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
 8003760:	e026      	b.n	80037b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d007      	beq.n	8003786 <UART_Receive_IT+0x74>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <UART_Receive_IT+0x82>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e008      	b.n	80037a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4619      	mov	r1, r3
 80037be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d136      	bne.n	8003832 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0220 	bic.w	r2, r2, #32
 80037d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10e      	bne.n	8003822 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0210 	bic.w	r2, r2, #16
 8003812:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fe40 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
 8003820:	e002      	b.n	8003828 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fb26 	bl	8000e74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e002      	b.n	8003838 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	b09f      	sub	sp, #124	; 0x7c
 8003846:	af00      	add	r7, sp, #0
 8003848:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	68d9      	ldr	r1, [r3, #12]
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	ea40 0301 	orr.w	r3, r0, r1
 8003860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	431a      	orrs	r2, r3
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4313      	orrs	r3, r2
 8003878:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003884:	f021 010c 	bic.w	r1, r1, #12
 8003888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800388e:	430b      	orrs	r3, r1
 8003890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	6999      	ldr	r1, [r3, #24]
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	ea40 0301 	orr.w	r3, r0, r1
 80038a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4bc5      	ldr	r3, [pc, #788]	; (8003bc4 <UART_SetConfig+0x384>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d004      	beq.n	80038be <UART_SetConfig+0x7e>
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4bc3      	ldr	r3, [pc, #780]	; (8003bc8 <UART_SetConfig+0x388>)
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d103      	bne.n	80038c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038be:	f7fe fcbd 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 80038c2:	6778      	str	r0, [r7, #116]	; 0x74
 80038c4:	e002      	b.n	80038cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038c6:	f7fe fca5 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80038ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d4:	f040 80b6 	bne.w	8003a44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038da:	461c      	mov	r4, r3
 80038dc:	f04f 0500 	mov.w	r5, #0
 80038e0:	4622      	mov	r2, r4
 80038e2:	462b      	mov	r3, r5
 80038e4:	1891      	adds	r1, r2, r2
 80038e6:	6439      	str	r1, [r7, #64]	; 0x40
 80038e8:	415b      	adcs	r3, r3
 80038ea:	647b      	str	r3, [r7, #68]	; 0x44
 80038ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038f0:	1912      	adds	r2, r2, r4
 80038f2:	eb45 0303 	adc.w	r3, r5, r3
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	00d9      	lsls	r1, r3, #3
 8003900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003904:	00d0      	lsls	r0, r2, #3
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	1911      	adds	r1, r2, r4
 800390c:	6639      	str	r1, [r7, #96]	; 0x60
 800390e:	416b      	adcs	r3, r5
 8003910:	667b      	str	r3, [r7, #100]	; 0x64
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	461a      	mov	r2, r3
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	1891      	adds	r1, r2, r2
 800391e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003920:	415b      	adcs	r3, r3
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003928:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800392c:	f7fc fcb0 	bl	8000290 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4ba5      	ldr	r3, [pc, #660]	; (8003bcc <UART_SetConfig+0x38c>)
 8003936:	fba3 2302 	umull	r2, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	011e      	lsls	r6, r3, #4
 800393e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003940:	461c      	mov	r4, r3
 8003942:	f04f 0500 	mov.w	r5, #0
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	1891      	adds	r1, r2, r2
 800394c:	6339      	str	r1, [r7, #48]	; 0x30
 800394e:	415b      	adcs	r3, r3
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003956:	1912      	adds	r2, r2, r4
 8003958:	eb45 0303 	adc.w	r3, r5, r3
 800395c:	f04f 0000 	mov.w	r0, #0
 8003960:	f04f 0100 	mov.w	r1, #0
 8003964:	00d9      	lsls	r1, r3, #3
 8003966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800396a:	00d0      	lsls	r0, r2, #3
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	1911      	adds	r1, r2, r4
 8003972:	65b9      	str	r1, [r7, #88]	; 0x58
 8003974:	416b      	adcs	r3, r5
 8003976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	461a      	mov	r2, r3
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	1891      	adds	r1, r2, r2
 8003984:	62b9      	str	r1, [r7, #40]	; 0x28
 8003986:	415b      	adcs	r3, r3
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003992:	f7fc fc7d 	bl	8000290 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <UART_SetConfig+0x38c>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <UART_SetConfig+0x38c>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039bc:	441e      	add	r6, r3
 80039be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c0:	4618      	mov	r0, r3
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	1894      	adds	r4, r2, r2
 80039cc:	623c      	str	r4, [r7, #32]
 80039ce:	415b      	adcs	r3, r3
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d6:	1812      	adds	r2, r2, r0
 80039d8:	eb41 0303 	adc.w	r3, r1, r3
 80039dc:	f04f 0400 	mov.w	r4, #0
 80039e0:	f04f 0500 	mov.w	r5, #0
 80039e4:	00dd      	lsls	r5, r3, #3
 80039e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039ea:	00d4      	lsls	r4, r2, #3
 80039ec:	4622      	mov	r2, r4
 80039ee:	462b      	mov	r3, r5
 80039f0:	1814      	adds	r4, r2, r0
 80039f2:	653c      	str	r4, [r7, #80]	; 0x50
 80039f4:	414b      	adcs	r3, r1
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	1891      	adds	r1, r2, r2
 8003a04:	61b9      	str	r1, [r7, #24]
 8003a06:	415b      	adcs	r3, r3
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a12:	f7fc fc3d 	bl	8000290 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <UART_SetConfig+0x38c>)
 8003a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2164      	movs	r1, #100	; 0x64
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a67      	ldr	r2, [pc, #412]	; (8003bcc <UART_SetConfig+0x38c>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 0207 	and.w	r2, r3, #7
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4432      	add	r2, r6
 8003a40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a42:	e0b9      	b.n	8003bb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a46:	461c      	mov	r4, r3
 8003a48:	f04f 0500 	mov.w	r5, #0
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	462b      	mov	r3, r5
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	6139      	str	r1, [r7, #16]
 8003a54:	415b      	adcs	r3, r3
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a5c:	1912      	adds	r2, r2, r4
 8003a5e:	eb45 0303 	adc.w	r3, r5, r3
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	00d9      	lsls	r1, r3, #3
 8003a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a70:	00d0      	lsls	r0, r2, #3
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	eb12 0804 	adds.w	r8, r2, r4
 8003a7a:	eb43 0905 	adc.w	r9, r3, r5
 8003a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	008b      	lsls	r3, r1, #2
 8003a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a96:	0082      	lsls	r2, r0, #2
 8003a98:	4640      	mov	r0, r8
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	f7fc fbf8 	bl	8000290 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <UART_SetConfig+0x38c>)
 8003aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	011e      	lsls	r6, r3, #4
 8003aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	1894      	adds	r4, r2, r2
 8003abc:	60bc      	str	r4, [r7, #8]
 8003abe:	415b      	adcs	r3, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac6:	1812      	adds	r2, r2, r0
 8003ac8:	eb41 0303 	adc.w	r3, r1, r3
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	f04f 0500 	mov.w	r5, #0
 8003ad4:	00dd      	lsls	r5, r3, #3
 8003ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ada:	00d4      	lsls	r4, r2, #3
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	1814      	adds	r4, r2, r0
 8003ae2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	008b      	lsls	r3, r1, #2
 8003afc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b00:	0082      	lsls	r2, r0, #2
 8003b02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b06:	f7fc fbc3 	bl	8000290 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <UART_SetConfig+0x38c>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	; 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	3332      	adds	r3, #50	; 0x32
 8003b22:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <UART_SetConfig+0x38c>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2e:	441e      	add	r6, r3
 8003b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b32:	4618      	mov	r0, r3
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	1894      	adds	r4, r2, r2
 8003b3e:	603c      	str	r4, [r7, #0]
 8003b40:	415b      	adcs	r3, r3
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b48:	1812      	adds	r2, r2, r0
 8003b4a:	eb41 0303 	adc.w	r3, r1, r3
 8003b4e:	f04f 0400 	mov.w	r4, #0
 8003b52:	f04f 0500 	mov.w	r5, #0
 8003b56:	00dd      	lsls	r5, r3, #3
 8003b58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b5c:	00d4      	lsls	r4, r2, #3
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	eb12 0a00 	adds.w	sl, r2, r0
 8003b66:	eb43 0b01 	adc.w	fp, r3, r1
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	008b      	lsls	r3, r1, #2
 8003b7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b82:	0082      	lsls	r2, r0, #2
 8003b84:	4650      	mov	r0, sl
 8003b86:	4659      	mov	r1, fp
 8003b88:	f7fc fb82 	bl	8000290 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <UART_SetConfig+0x38c>)
 8003b92:	fba3 1302 	umull	r1, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2164      	movs	r1, #100	; 0x64
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <UART_SetConfig+0x38c>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4432      	add	r2, r6
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	377c      	adds	r7, #124	; 0x7c
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40011000 	.word	0x40011000
 8003bc8:	40011400 	.word	0x40011400
 8003bcc:	51eb851f 	.word	0x51eb851f

08003bd0 <__errno>:
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <__errno+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	200000a8 	.word	0x200000a8

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 fc4e 	bl	8004490 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	080045cc 	.word	0x080045cc
 8003c18:	080045cc 	.word	0x080045cc
 8003c1c:	080045cc 	.word	0x080045cc
 8003c20:	080045d0 	.word	0x080045d0

08003c24 <memset>:
 8003c24:	4402      	add	r2, r0
 8003c26:	4603      	mov	r3, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <siprintf>:
 8003c34:	b40e      	push	{r1, r2, r3}
 8003c36:	b500      	push	{lr}
 8003c38:	b09c      	sub	sp, #112	; 0x70
 8003c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c3c:	9002      	str	r0, [sp, #8]
 8003c3e:	9006      	str	r0, [sp, #24]
 8003c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c44:	4809      	ldr	r0, [pc, #36]	; (8003c6c <siprintf+0x38>)
 8003c46:	9107      	str	r1, [sp, #28]
 8003c48:	9104      	str	r1, [sp, #16]
 8003c4a:	4909      	ldr	r1, [pc, #36]	; (8003c70 <siprintf+0x3c>)
 8003c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c50:	9105      	str	r1, [sp, #20]
 8003c52:	6800      	ldr	r0, [r0, #0]
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	a902      	add	r1, sp, #8
 8003c58:	f000 f868 	bl	8003d2c <_svfiprintf_r>
 8003c5c:	9b02      	ldr	r3, [sp, #8]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	b01c      	add	sp, #112	; 0x70
 8003c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c68:	b003      	add	sp, #12
 8003c6a:	4770      	bx	lr
 8003c6c:	200000a8 	.word	0x200000a8
 8003c70:	ffff0208 	.word	0xffff0208

08003c74 <__ssputs_r>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	688e      	ldr	r6, [r1, #8]
 8003c7a:	429e      	cmp	r6, r3
 8003c7c:	4682      	mov	sl, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	4690      	mov	r8, r2
 8003c82:	461f      	mov	r7, r3
 8003c84:	d838      	bhi.n	8003cf8 <__ssputs_r+0x84>
 8003c86:	898a      	ldrh	r2, [r1, #12]
 8003c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c8c:	d032      	beq.n	8003cf4 <__ssputs_r+0x80>
 8003c8e:	6825      	ldr	r5, [r4, #0]
 8003c90:	6909      	ldr	r1, [r1, #16]
 8003c92:	eba5 0901 	sub.w	r9, r5, r1
 8003c96:	6965      	ldr	r5, [r4, #20]
 8003c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	444b      	add	r3, r9
 8003ca4:	106d      	asrs	r5, r5, #1
 8003ca6:	429d      	cmp	r5, r3
 8003ca8:	bf38      	it	cc
 8003caa:	461d      	movcc	r5, r3
 8003cac:	0553      	lsls	r3, r2, #21
 8003cae:	d531      	bpl.n	8003d14 <__ssputs_r+0xa0>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f000 fb47 	bl	8004344 <_malloc_r>
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	b950      	cbnz	r0, 8003cd0 <__ssputs_r+0x5c>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	f8ca 3000 	str.w	r3, [sl]
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	6921      	ldr	r1, [r4, #16]
 8003cd2:	464a      	mov	r2, r9
 8003cd4:	f000 fabe 	bl	8004254 <memcpy>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	6126      	str	r6, [r4, #16]
 8003ce6:	6165      	str	r5, [r4, #20]
 8003ce8:	444e      	add	r6, r9
 8003cea:	eba5 0509 	sub.w	r5, r5, r9
 8003cee:	6026      	str	r6, [r4, #0]
 8003cf0:	60a5      	str	r5, [r4, #8]
 8003cf2:	463e      	mov	r6, r7
 8003cf4:	42be      	cmp	r6, r7
 8003cf6:	d900      	bls.n	8003cfa <__ssputs_r+0x86>
 8003cf8:	463e      	mov	r6, r7
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	4641      	mov	r1, r8
 8003d00:	f000 fab6 	bl	8004270 <memmove>
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	1b9b      	subs	r3, r3, r6
 8003d0a:	4432      	add	r2, r6
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	2000      	movs	r0, #0
 8003d12:	e7db      	b.n	8003ccc <__ssputs_r+0x58>
 8003d14:	462a      	mov	r2, r5
 8003d16:	f000 fb6f 	bl	80043f8 <_realloc_r>
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d1e1      	bne.n	8003ce4 <__ssputs_r+0x70>
 8003d20:	6921      	ldr	r1, [r4, #16]
 8003d22:	4650      	mov	r0, sl
 8003d24:	f000 fabe 	bl	80042a4 <_free_r>
 8003d28:	e7c7      	b.n	8003cba <__ssputs_r+0x46>
	...

08003d2c <_svfiprintf_r>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	4698      	mov	r8, r3
 8003d32:	898b      	ldrh	r3, [r1, #12]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	b09d      	sub	sp, #116	; 0x74
 8003d38:	4607      	mov	r7, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	d50e      	bpl.n	8003d5e <_svfiprintf_r+0x32>
 8003d40:	690b      	ldr	r3, [r1, #16]
 8003d42:	b963      	cbnz	r3, 8003d5e <_svfiprintf_r+0x32>
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	f000 fafd 	bl	8004344 <_malloc_r>
 8003d4a:	6028      	str	r0, [r5, #0]
 8003d4c:	6128      	str	r0, [r5, #16]
 8003d4e:	b920      	cbnz	r0, 8003d5a <_svfiprintf_r+0x2e>
 8003d50:	230c      	movs	r3, #12
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e0d1      	b.n	8003efe <_svfiprintf_r+0x1d2>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	616b      	str	r3, [r5, #20]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
 8003d62:	2320      	movs	r3, #32
 8003d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d6c:	2330      	movs	r3, #48	; 0x30
 8003d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f18 <_svfiprintf_r+0x1ec>
 8003d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d76:	f04f 0901 	mov.w	r9, #1
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	469a      	mov	sl, r3
 8003d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d82:	b10a      	cbz	r2, 8003d88 <_svfiprintf_r+0x5c>
 8003d84:	2a25      	cmp	r2, #37	; 0x25
 8003d86:	d1f9      	bne.n	8003d7c <_svfiprintf_r+0x50>
 8003d88:	ebba 0b04 	subs.w	fp, sl, r4
 8003d8c:	d00b      	beq.n	8003da6 <_svfiprintf_r+0x7a>
 8003d8e:	465b      	mov	r3, fp
 8003d90:	4622      	mov	r2, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7ff ff6d 	bl	8003c74 <__ssputs_r>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f000 80aa 	beq.w	8003ef4 <_svfiprintf_r+0x1c8>
 8003da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da2:	445a      	add	r2, fp
 8003da4:	9209      	str	r2, [sp, #36]	; 0x24
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a2 	beq.w	8003ef4 <_svfiprintf_r+0x1c8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dba:	f10a 0a01 	add.w	sl, sl, #1
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	9307      	str	r3, [sp, #28]
 8003dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc8:	4654      	mov	r4, sl
 8003dca:	2205      	movs	r2, #5
 8003dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd0:	4851      	ldr	r0, [pc, #324]	; (8003f18 <_svfiprintf_r+0x1ec>)
 8003dd2:	f7fc fa0d 	bl	80001f0 <memchr>
 8003dd6:	9a04      	ldr	r2, [sp, #16]
 8003dd8:	b9d8      	cbnz	r0, 8003e12 <_svfiprintf_r+0xe6>
 8003dda:	06d0      	lsls	r0, r2, #27
 8003ddc:	bf44      	itt	mi
 8003dde:	2320      	movmi	r3, #32
 8003de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de4:	0711      	lsls	r1, r2, #28
 8003de6:	bf44      	itt	mi
 8003de8:	232b      	movmi	r3, #43	; 0x2b
 8003dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dee:	f89a 3000 	ldrb.w	r3, [sl]
 8003df2:	2b2a      	cmp	r3, #42	; 0x2a
 8003df4:	d015      	beq.n	8003e22 <_svfiprintf_r+0xf6>
 8003df6:	9a07      	ldr	r2, [sp, #28]
 8003df8:	4654      	mov	r4, sl
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f04f 0c0a 	mov.w	ip, #10
 8003e00:	4621      	mov	r1, r4
 8003e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e06:	3b30      	subs	r3, #48	; 0x30
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d94e      	bls.n	8003eaa <_svfiprintf_r+0x17e>
 8003e0c:	b1b0      	cbz	r0, 8003e3c <_svfiprintf_r+0x110>
 8003e0e:	9207      	str	r2, [sp, #28]
 8003e10:	e014      	b.n	8003e3c <_svfiprintf_r+0x110>
 8003e12:	eba0 0308 	sub.w	r3, r0, r8
 8003e16:	fa09 f303 	lsl.w	r3, r9, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	46a2      	mov	sl, r4
 8003e20:	e7d2      	b.n	8003dc8 <_svfiprintf_r+0x9c>
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	9103      	str	r1, [sp, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfbb      	ittet	lt
 8003e2e:	425b      	neglt	r3, r3
 8003e30:	f042 0202 	orrlt.w	r2, r2, #2
 8003e34:	9307      	strge	r3, [sp, #28]
 8003e36:	9307      	strlt	r3, [sp, #28]
 8003e38:	bfb8      	it	lt
 8003e3a:	9204      	strlt	r2, [sp, #16]
 8003e3c:	7823      	ldrb	r3, [r4, #0]
 8003e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e40:	d10c      	bne.n	8003e5c <_svfiprintf_r+0x130>
 8003e42:	7863      	ldrb	r3, [r4, #1]
 8003e44:	2b2a      	cmp	r3, #42	; 0x2a
 8003e46:	d135      	bne.n	8003eb4 <_svfiprintf_r+0x188>
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	9203      	str	r2, [sp, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bfb8      	it	lt
 8003e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e58:	3402      	adds	r4, #2
 8003e5a:	9305      	str	r3, [sp, #20]
 8003e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f28 <_svfiprintf_r+0x1fc>
 8003e60:	7821      	ldrb	r1, [r4, #0]
 8003e62:	2203      	movs	r2, #3
 8003e64:	4650      	mov	r0, sl
 8003e66:	f7fc f9c3 	bl	80001f0 <memchr>
 8003e6a:	b140      	cbz	r0, 8003e7e <_svfiprintf_r+0x152>
 8003e6c:	2340      	movs	r3, #64	; 0x40
 8003e6e:	eba0 000a 	sub.w	r0, r0, sl
 8003e72:	fa03 f000 	lsl.w	r0, r3, r0
 8003e76:	9b04      	ldr	r3, [sp, #16]
 8003e78:	4303      	orrs	r3, r0
 8003e7a:	3401      	adds	r4, #1
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e82:	4826      	ldr	r0, [pc, #152]	; (8003f1c <_svfiprintf_r+0x1f0>)
 8003e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e88:	2206      	movs	r2, #6
 8003e8a:	f7fc f9b1 	bl	80001f0 <memchr>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d038      	beq.n	8003f04 <_svfiprintf_r+0x1d8>
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <_svfiprintf_r+0x1f4>)
 8003e94:	bb1b      	cbnz	r3, 8003ede <_svfiprintf_r+0x1b2>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	f023 0307 	bic.w	r3, r3, #7
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea4:	4433      	add	r3, r6
 8003ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea8:	e767      	b.n	8003d7a <_svfiprintf_r+0x4e>
 8003eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eae:	460c      	mov	r4, r1
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	e7a5      	b.n	8003e00 <_svfiprintf_r+0xd4>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f04f 0c0a 	mov.w	ip, #10
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec6:	3a30      	subs	r2, #48	; 0x30
 8003ec8:	2a09      	cmp	r2, #9
 8003eca:	d903      	bls.n	8003ed4 <_svfiprintf_r+0x1a8>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0c5      	beq.n	8003e5c <_svfiprintf_r+0x130>
 8003ed0:	9105      	str	r1, [sp, #20]
 8003ed2:	e7c3      	b.n	8003e5c <_svfiprintf_r+0x130>
 8003ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed8:	4604      	mov	r4, r0
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7f0      	b.n	8003ec0 <_svfiprintf_r+0x194>
 8003ede:	ab03      	add	r3, sp, #12
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	462a      	mov	r2, r5
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <_svfiprintf_r+0x1f8>)
 8003ee6:	a904      	add	r1, sp, #16
 8003ee8:	4638      	mov	r0, r7
 8003eea:	f3af 8000 	nop.w
 8003eee:	1c42      	adds	r2, r0, #1
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	d1d6      	bne.n	8003ea2 <_svfiprintf_r+0x176>
 8003ef4:	89ab      	ldrh	r3, [r5, #12]
 8003ef6:	065b      	lsls	r3, r3, #25
 8003ef8:	f53f af2c 	bmi.w	8003d54 <_svfiprintf_r+0x28>
 8003efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efe:	b01d      	add	sp, #116	; 0x74
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	462a      	mov	r2, r5
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <_svfiprintf_r+0x1f8>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4638      	mov	r0, r7
 8003f10:	f000 f87a 	bl	8004008 <_printf_i>
 8003f14:	e7eb      	b.n	8003eee <_svfiprintf_r+0x1c2>
 8003f16:	bf00      	nop
 8003f18:	08004590 	.word	0x08004590
 8003f1c:	0800459a 	.word	0x0800459a
 8003f20:	00000000 	.word	0x00000000
 8003f24:	08003c75 	.word	0x08003c75
 8003f28:	08004596 	.word	0x08004596

08003f2c <_printf_common>:
 8003f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	4616      	mov	r6, r2
 8003f32:	4699      	mov	r9, r3
 8003f34:	688a      	ldr	r2, [r1, #8]
 8003f36:	690b      	ldr	r3, [r1, #16]
 8003f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bfb8      	it	lt
 8003f40:	4613      	movlt	r3, r2
 8003f42:	6033      	str	r3, [r6, #0]
 8003f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f48:	4607      	mov	r7, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	b10a      	cbz	r2, 8003f52 <_printf_common+0x26>
 8003f4e:	3301      	adds	r3, #1
 8003f50:	6033      	str	r3, [r6, #0]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	0699      	lsls	r1, r3, #26
 8003f56:	bf42      	ittt	mi
 8003f58:	6833      	ldrmi	r3, [r6, #0]
 8003f5a:	3302      	addmi	r3, #2
 8003f5c:	6033      	strmi	r3, [r6, #0]
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	f015 0506 	ands.w	r5, r5, #6
 8003f64:	d106      	bne.n	8003f74 <_printf_common+0x48>
 8003f66:	f104 0a19 	add.w	sl, r4, #25
 8003f6a:	68e3      	ldr	r3, [r4, #12]
 8003f6c:	6832      	ldr	r2, [r6, #0]
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	42ab      	cmp	r3, r5
 8003f72:	dc26      	bgt.n	8003fc2 <_printf_common+0x96>
 8003f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f78:	1e13      	subs	r3, r2, #0
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	bf18      	it	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	0692      	lsls	r2, r2, #26
 8003f82:	d42b      	bmi.n	8003fdc <_printf_common+0xb0>
 8003f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f88:	4649      	mov	r1, r9
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c0      	blx	r8
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d01e      	beq.n	8003fd0 <_printf_common+0xa4>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	68e5      	ldr	r5, [r4, #12]
 8003f96:	6832      	ldr	r2, [r6, #0]
 8003f98:	f003 0306 	and.w	r3, r3, #6
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	bf08      	it	eq
 8003fa0:	1aad      	subeq	r5, r5, r2
 8003fa2:	68a3      	ldr	r3, [r4, #8]
 8003fa4:	6922      	ldr	r2, [r4, #16]
 8003fa6:	bf0c      	ite	eq
 8003fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fac:	2500      	movne	r5, #0
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bfc4      	itt	gt
 8003fb2:	1a9b      	subgt	r3, r3, r2
 8003fb4:	18ed      	addgt	r5, r5, r3
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	341a      	adds	r4, #26
 8003fba:	42b5      	cmp	r5, r6
 8003fbc:	d11a      	bne.n	8003ff4 <_printf_common+0xc8>
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	e008      	b.n	8003fd4 <_printf_common+0xa8>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4652      	mov	r2, sl
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	4638      	mov	r0, r7
 8003fca:	47c0      	blx	r8
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d103      	bne.n	8003fd8 <_printf_common+0xac>
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd8:	3501      	adds	r5, #1
 8003fda:	e7c6      	b.n	8003f6a <_printf_common+0x3e>
 8003fdc:	18e1      	adds	r1, r4, r3
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	2030      	movs	r0, #48	; 0x30
 8003fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fe6:	4422      	add	r2, r4
 8003fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	e7c7      	b.n	8003f84 <_printf_common+0x58>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c0      	blx	r8
 8003ffe:	3001      	adds	r0, #1
 8004000:	d0e6      	beq.n	8003fd0 <_printf_common+0xa4>
 8004002:	3601      	adds	r6, #1
 8004004:	e7d9      	b.n	8003fba <_printf_common+0x8e>
	...

08004008 <_printf_i>:
 8004008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800400c:	460c      	mov	r4, r1
 800400e:	4691      	mov	r9, r2
 8004010:	7e27      	ldrb	r7, [r4, #24]
 8004012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004014:	2f78      	cmp	r7, #120	; 0x78
 8004016:	4680      	mov	r8, r0
 8004018:	469a      	mov	sl, r3
 800401a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800401e:	d807      	bhi.n	8004030 <_printf_i+0x28>
 8004020:	2f62      	cmp	r7, #98	; 0x62
 8004022:	d80a      	bhi.n	800403a <_printf_i+0x32>
 8004024:	2f00      	cmp	r7, #0
 8004026:	f000 80d8 	beq.w	80041da <_printf_i+0x1d2>
 800402a:	2f58      	cmp	r7, #88	; 0x58
 800402c:	f000 80a3 	beq.w	8004176 <_printf_i+0x16e>
 8004030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004038:	e03a      	b.n	80040b0 <_printf_i+0xa8>
 800403a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800403e:	2b15      	cmp	r3, #21
 8004040:	d8f6      	bhi.n	8004030 <_printf_i+0x28>
 8004042:	a001      	add	r0, pc, #4	; (adr r0, 8004048 <_printf_i+0x40>)
 8004044:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004048:	080040a1 	.word	0x080040a1
 800404c:	080040b5 	.word	0x080040b5
 8004050:	08004031 	.word	0x08004031
 8004054:	08004031 	.word	0x08004031
 8004058:	08004031 	.word	0x08004031
 800405c:	08004031 	.word	0x08004031
 8004060:	080040b5 	.word	0x080040b5
 8004064:	08004031 	.word	0x08004031
 8004068:	08004031 	.word	0x08004031
 800406c:	08004031 	.word	0x08004031
 8004070:	08004031 	.word	0x08004031
 8004074:	080041c1 	.word	0x080041c1
 8004078:	080040e5 	.word	0x080040e5
 800407c:	080041a3 	.word	0x080041a3
 8004080:	08004031 	.word	0x08004031
 8004084:	08004031 	.word	0x08004031
 8004088:	080041e3 	.word	0x080041e3
 800408c:	08004031 	.word	0x08004031
 8004090:	080040e5 	.word	0x080040e5
 8004094:	08004031 	.word	0x08004031
 8004098:	08004031 	.word	0x08004031
 800409c:	080041ab 	.word	0x080041ab
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	600a      	str	r2, [r1, #0]
 80040a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0a3      	b.n	80041fc <_printf_i+0x1f4>
 80040b4:	6825      	ldr	r5, [r4, #0]
 80040b6:	6808      	ldr	r0, [r1, #0]
 80040b8:	062e      	lsls	r6, r5, #24
 80040ba:	f100 0304 	add.w	r3, r0, #4
 80040be:	d50a      	bpl.n	80040d6 <_printf_i+0xce>
 80040c0:	6805      	ldr	r5, [r0, #0]
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	da03      	bge.n	80040d0 <_printf_i+0xc8>
 80040c8:	232d      	movs	r3, #45	; 0x2d
 80040ca:	426d      	negs	r5, r5
 80040cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d0:	485e      	ldr	r0, [pc, #376]	; (800424c <_printf_i+0x244>)
 80040d2:	230a      	movs	r3, #10
 80040d4:	e019      	b.n	800410a <_printf_i+0x102>
 80040d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040da:	6805      	ldr	r5, [r0, #0]
 80040dc:	600b      	str	r3, [r1, #0]
 80040de:	bf18      	it	ne
 80040e0:	b22d      	sxthne	r5, r5
 80040e2:	e7ef      	b.n	80040c4 <_printf_i+0xbc>
 80040e4:	680b      	ldr	r3, [r1, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	1d18      	adds	r0, r3, #4
 80040ea:	6008      	str	r0, [r1, #0]
 80040ec:	0628      	lsls	r0, r5, #24
 80040ee:	d501      	bpl.n	80040f4 <_printf_i+0xec>
 80040f0:	681d      	ldr	r5, [r3, #0]
 80040f2:	e002      	b.n	80040fa <_printf_i+0xf2>
 80040f4:	0669      	lsls	r1, r5, #25
 80040f6:	d5fb      	bpl.n	80040f0 <_printf_i+0xe8>
 80040f8:	881d      	ldrh	r5, [r3, #0]
 80040fa:	4854      	ldr	r0, [pc, #336]	; (800424c <_printf_i+0x244>)
 80040fc:	2f6f      	cmp	r7, #111	; 0x6f
 80040fe:	bf0c      	ite	eq
 8004100:	2308      	moveq	r3, #8
 8004102:	230a      	movne	r3, #10
 8004104:	2100      	movs	r1, #0
 8004106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800410a:	6866      	ldr	r6, [r4, #4]
 800410c:	60a6      	str	r6, [r4, #8]
 800410e:	2e00      	cmp	r6, #0
 8004110:	bfa2      	ittt	ge
 8004112:	6821      	ldrge	r1, [r4, #0]
 8004114:	f021 0104 	bicge.w	r1, r1, #4
 8004118:	6021      	strge	r1, [r4, #0]
 800411a:	b90d      	cbnz	r5, 8004120 <_printf_i+0x118>
 800411c:	2e00      	cmp	r6, #0
 800411e:	d04d      	beq.n	80041bc <_printf_i+0x1b4>
 8004120:	4616      	mov	r6, r2
 8004122:	fbb5 f1f3 	udiv	r1, r5, r3
 8004126:	fb03 5711 	mls	r7, r3, r1, r5
 800412a:	5dc7      	ldrb	r7, [r0, r7]
 800412c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004130:	462f      	mov	r7, r5
 8004132:	42bb      	cmp	r3, r7
 8004134:	460d      	mov	r5, r1
 8004136:	d9f4      	bls.n	8004122 <_printf_i+0x11a>
 8004138:	2b08      	cmp	r3, #8
 800413a:	d10b      	bne.n	8004154 <_printf_i+0x14c>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	07df      	lsls	r7, r3, #31
 8004140:	d508      	bpl.n	8004154 <_printf_i+0x14c>
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	6861      	ldr	r1, [r4, #4]
 8004146:	4299      	cmp	r1, r3
 8004148:	bfde      	ittt	le
 800414a:	2330      	movle	r3, #48	; 0x30
 800414c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004154:	1b92      	subs	r2, r2, r6
 8004156:	6122      	str	r2, [r4, #16]
 8004158:	f8cd a000 	str.w	sl, [sp]
 800415c:	464b      	mov	r3, r9
 800415e:	aa03      	add	r2, sp, #12
 8004160:	4621      	mov	r1, r4
 8004162:	4640      	mov	r0, r8
 8004164:	f7ff fee2 	bl	8003f2c <_printf_common>
 8004168:	3001      	adds	r0, #1
 800416a:	d14c      	bne.n	8004206 <_printf_i+0x1fe>
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	b004      	add	sp, #16
 8004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004176:	4835      	ldr	r0, [pc, #212]	; (800424c <_printf_i+0x244>)
 8004178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	680e      	ldr	r6, [r1, #0]
 8004180:	061f      	lsls	r7, r3, #24
 8004182:	f856 5b04 	ldr.w	r5, [r6], #4
 8004186:	600e      	str	r6, [r1, #0]
 8004188:	d514      	bpl.n	80041b4 <_printf_i+0x1ac>
 800418a:	07d9      	lsls	r1, r3, #31
 800418c:	bf44      	itt	mi
 800418e:	f043 0320 	orrmi.w	r3, r3, #32
 8004192:	6023      	strmi	r3, [r4, #0]
 8004194:	b91d      	cbnz	r5, 800419e <_printf_i+0x196>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f023 0320 	bic.w	r3, r3, #32
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	2310      	movs	r3, #16
 80041a0:	e7b0      	b.n	8004104 <_printf_i+0xfc>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	f043 0320 	orr.w	r3, r3, #32
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	2378      	movs	r3, #120	; 0x78
 80041ac:	4828      	ldr	r0, [pc, #160]	; (8004250 <_printf_i+0x248>)
 80041ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041b2:	e7e3      	b.n	800417c <_printf_i+0x174>
 80041b4:	065e      	lsls	r6, r3, #25
 80041b6:	bf48      	it	mi
 80041b8:	b2ad      	uxthmi	r5, r5
 80041ba:	e7e6      	b.n	800418a <_printf_i+0x182>
 80041bc:	4616      	mov	r6, r2
 80041be:	e7bb      	b.n	8004138 <_printf_i+0x130>
 80041c0:	680b      	ldr	r3, [r1, #0]
 80041c2:	6826      	ldr	r6, [r4, #0]
 80041c4:	6960      	ldr	r0, [r4, #20]
 80041c6:	1d1d      	adds	r5, r3, #4
 80041c8:	600d      	str	r5, [r1, #0]
 80041ca:	0635      	lsls	r5, r6, #24
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0x1cc>
 80041d0:	6018      	str	r0, [r3, #0]
 80041d2:	e002      	b.n	80041da <_printf_i+0x1d2>
 80041d4:	0671      	lsls	r1, r6, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0x1c8>
 80041d8:	8018      	strh	r0, [r3, #0]
 80041da:	2300      	movs	r3, #0
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	4616      	mov	r6, r2
 80041e0:	e7ba      	b.n	8004158 <_printf_i+0x150>
 80041e2:	680b      	ldr	r3, [r1, #0]
 80041e4:	1d1a      	adds	r2, r3, #4
 80041e6:	600a      	str	r2, [r1, #0]
 80041e8:	681e      	ldr	r6, [r3, #0]
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7fb fffe 	bl	80001f0 <memchr>
 80041f4:	b108      	cbz	r0, 80041fa <_printf_i+0x1f2>
 80041f6:	1b80      	subs	r0, r0, r6
 80041f8:	6060      	str	r0, [r4, #4]
 80041fa:	6863      	ldr	r3, [r4, #4]
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	2300      	movs	r3, #0
 8004200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004204:	e7a8      	b.n	8004158 <_printf_i+0x150>
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	4632      	mov	r2, r6
 800420a:	4649      	mov	r1, r9
 800420c:	4640      	mov	r0, r8
 800420e:	47d0      	blx	sl
 8004210:	3001      	adds	r0, #1
 8004212:	d0ab      	beq.n	800416c <_printf_i+0x164>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	079b      	lsls	r3, r3, #30
 8004218:	d413      	bmi.n	8004242 <_printf_i+0x23a>
 800421a:	68e0      	ldr	r0, [r4, #12]
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	4298      	cmp	r0, r3
 8004220:	bfb8      	it	lt
 8004222:	4618      	movlt	r0, r3
 8004224:	e7a4      	b.n	8004170 <_printf_i+0x168>
 8004226:	2301      	movs	r3, #1
 8004228:	4632      	mov	r2, r6
 800422a:	4649      	mov	r1, r9
 800422c:	4640      	mov	r0, r8
 800422e:	47d0      	blx	sl
 8004230:	3001      	adds	r0, #1
 8004232:	d09b      	beq.n	800416c <_printf_i+0x164>
 8004234:	3501      	adds	r5, #1
 8004236:	68e3      	ldr	r3, [r4, #12]
 8004238:	9903      	ldr	r1, [sp, #12]
 800423a:	1a5b      	subs	r3, r3, r1
 800423c:	42ab      	cmp	r3, r5
 800423e:	dcf2      	bgt.n	8004226 <_printf_i+0x21e>
 8004240:	e7eb      	b.n	800421a <_printf_i+0x212>
 8004242:	2500      	movs	r5, #0
 8004244:	f104 0619 	add.w	r6, r4, #25
 8004248:	e7f5      	b.n	8004236 <_printf_i+0x22e>
 800424a:	bf00      	nop
 800424c:	080045a1 	.word	0x080045a1
 8004250:	080045b2 	.word	0x080045b2

08004254 <memcpy>:
 8004254:	440a      	add	r2, r1
 8004256:	4291      	cmp	r1, r2
 8004258:	f100 33ff 	add.w	r3, r0, #4294967295
 800425c:	d100      	bne.n	8004260 <memcpy+0xc>
 800425e:	4770      	bx	lr
 8004260:	b510      	push	{r4, lr}
 8004262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426a:	4291      	cmp	r1, r2
 800426c:	d1f9      	bne.n	8004262 <memcpy+0xe>
 800426e:	bd10      	pop	{r4, pc}

08004270 <memmove>:
 8004270:	4288      	cmp	r0, r1
 8004272:	b510      	push	{r4, lr}
 8004274:	eb01 0402 	add.w	r4, r1, r2
 8004278:	d902      	bls.n	8004280 <memmove+0x10>
 800427a:	4284      	cmp	r4, r0
 800427c:	4623      	mov	r3, r4
 800427e:	d807      	bhi.n	8004290 <memmove+0x20>
 8004280:	1e43      	subs	r3, r0, #1
 8004282:	42a1      	cmp	r1, r4
 8004284:	d008      	beq.n	8004298 <memmove+0x28>
 8004286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800428a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800428e:	e7f8      	b.n	8004282 <memmove+0x12>
 8004290:	4402      	add	r2, r0
 8004292:	4601      	mov	r1, r0
 8004294:	428a      	cmp	r2, r1
 8004296:	d100      	bne.n	800429a <memmove+0x2a>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800429e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042a2:	e7f7      	b.n	8004294 <memmove+0x24>

080042a4 <_free_r>:
 80042a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042a6:	2900      	cmp	r1, #0
 80042a8:	d048      	beq.n	800433c <_free_r+0x98>
 80042aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ae:	9001      	str	r0, [sp, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f1a1 0404 	sub.w	r4, r1, #4
 80042b6:	bfb8      	it	lt
 80042b8:	18e4      	addlt	r4, r4, r3
 80042ba:	f000 f8d3 	bl	8004464 <__malloc_lock>
 80042be:	4a20      	ldr	r2, [pc, #128]	; (8004340 <_free_r+0x9c>)
 80042c0:	9801      	ldr	r0, [sp, #4]
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	4615      	mov	r5, r2
 80042c6:	b933      	cbnz	r3, 80042d6 <_free_r+0x32>
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	6014      	str	r4, [r2, #0]
 80042cc:	b003      	add	sp, #12
 80042ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042d2:	f000 b8cd 	b.w	8004470 <__malloc_unlock>
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	d90b      	bls.n	80042f2 <_free_r+0x4e>
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	1862      	adds	r2, r4, r1
 80042de:	4293      	cmp	r3, r2
 80042e0:	bf04      	itt	eq
 80042e2:	681a      	ldreq	r2, [r3, #0]
 80042e4:	685b      	ldreq	r3, [r3, #4]
 80042e6:	6063      	str	r3, [r4, #4]
 80042e8:	bf04      	itt	eq
 80042ea:	1852      	addeq	r2, r2, r1
 80042ec:	6022      	streq	r2, [r4, #0]
 80042ee:	602c      	str	r4, [r5, #0]
 80042f0:	e7ec      	b.n	80042cc <_free_r+0x28>
 80042f2:	461a      	mov	r2, r3
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b10b      	cbz	r3, 80042fc <_free_r+0x58>
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	d9fa      	bls.n	80042f2 <_free_r+0x4e>
 80042fc:	6811      	ldr	r1, [r2, #0]
 80042fe:	1855      	adds	r5, r2, r1
 8004300:	42a5      	cmp	r5, r4
 8004302:	d10b      	bne.n	800431c <_free_r+0x78>
 8004304:	6824      	ldr	r4, [r4, #0]
 8004306:	4421      	add	r1, r4
 8004308:	1854      	adds	r4, r2, r1
 800430a:	42a3      	cmp	r3, r4
 800430c:	6011      	str	r1, [r2, #0]
 800430e:	d1dd      	bne.n	80042cc <_free_r+0x28>
 8004310:	681c      	ldr	r4, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	6053      	str	r3, [r2, #4]
 8004316:	4421      	add	r1, r4
 8004318:	6011      	str	r1, [r2, #0]
 800431a:	e7d7      	b.n	80042cc <_free_r+0x28>
 800431c:	d902      	bls.n	8004324 <_free_r+0x80>
 800431e:	230c      	movs	r3, #12
 8004320:	6003      	str	r3, [r0, #0]
 8004322:	e7d3      	b.n	80042cc <_free_r+0x28>
 8004324:	6825      	ldr	r5, [r4, #0]
 8004326:	1961      	adds	r1, r4, r5
 8004328:	428b      	cmp	r3, r1
 800432a:	bf04      	itt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	bf04      	itt	eq
 8004334:	1949      	addeq	r1, r1, r5
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	6054      	str	r4, [r2, #4]
 800433a:	e7c7      	b.n	80042cc <_free_r+0x28>
 800433c:	b003      	add	sp, #12
 800433e:	bd30      	pop	{r4, r5, pc}
 8004340:	200001b0 	.word	0x200001b0

08004344 <_malloc_r>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	1ccd      	adds	r5, r1, #3
 8004348:	f025 0503 	bic.w	r5, r5, #3
 800434c:	3508      	adds	r5, #8
 800434e:	2d0c      	cmp	r5, #12
 8004350:	bf38      	it	cc
 8004352:	250c      	movcc	r5, #12
 8004354:	2d00      	cmp	r5, #0
 8004356:	4606      	mov	r6, r0
 8004358:	db01      	blt.n	800435e <_malloc_r+0x1a>
 800435a:	42a9      	cmp	r1, r5
 800435c:	d903      	bls.n	8004366 <_malloc_r+0x22>
 800435e:	230c      	movs	r3, #12
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	2000      	movs	r0, #0
 8004364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004366:	f000 f87d 	bl	8004464 <__malloc_lock>
 800436a:	4921      	ldr	r1, [pc, #132]	; (80043f0 <_malloc_r+0xac>)
 800436c:	680a      	ldr	r2, [r1, #0]
 800436e:	4614      	mov	r4, r2
 8004370:	b99c      	cbnz	r4, 800439a <_malloc_r+0x56>
 8004372:	4f20      	ldr	r7, [pc, #128]	; (80043f4 <_malloc_r+0xb0>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b923      	cbnz	r3, 8004382 <_malloc_r+0x3e>
 8004378:	4621      	mov	r1, r4
 800437a:	4630      	mov	r0, r6
 800437c:	f000 f862 	bl	8004444 <_sbrk_r>
 8004380:	6038      	str	r0, [r7, #0]
 8004382:	4629      	mov	r1, r5
 8004384:	4630      	mov	r0, r6
 8004386:	f000 f85d 	bl	8004444 <_sbrk_r>
 800438a:	1c43      	adds	r3, r0, #1
 800438c:	d123      	bne.n	80043d6 <_malloc_r+0x92>
 800438e:	230c      	movs	r3, #12
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	4630      	mov	r0, r6
 8004394:	f000 f86c 	bl	8004470 <__malloc_unlock>
 8004398:	e7e3      	b.n	8004362 <_malloc_r+0x1e>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	1b5b      	subs	r3, r3, r5
 800439e:	d417      	bmi.n	80043d0 <_malloc_r+0x8c>
 80043a0:	2b0b      	cmp	r3, #11
 80043a2:	d903      	bls.n	80043ac <_malloc_r+0x68>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	441c      	add	r4, r3
 80043a8:	6025      	str	r5, [r4, #0]
 80043aa:	e004      	b.n	80043b6 <_malloc_r+0x72>
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	42a2      	cmp	r2, r4
 80043b0:	bf0c      	ite	eq
 80043b2:	600b      	streq	r3, [r1, #0]
 80043b4:	6053      	strne	r3, [r2, #4]
 80043b6:	4630      	mov	r0, r6
 80043b8:	f000 f85a 	bl	8004470 <__malloc_unlock>
 80043bc:	f104 000b 	add.w	r0, r4, #11
 80043c0:	1d23      	adds	r3, r4, #4
 80043c2:	f020 0007 	bic.w	r0, r0, #7
 80043c6:	1ac2      	subs	r2, r0, r3
 80043c8:	d0cc      	beq.n	8004364 <_malloc_r+0x20>
 80043ca:	1a1b      	subs	r3, r3, r0
 80043cc:	50a3      	str	r3, [r4, r2]
 80043ce:	e7c9      	b.n	8004364 <_malloc_r+0x20>
 80043d0:	4622      	mov	r2, r4
 80043d2:	6864      	ldr	r4, [r4, #4]
 80043d4:	e7cc      	b.n	8004370 <_malloc_r+0x2c>
 80043d6:	1cc4      	adds	r4, r0, #3
 80043d8:	f024 0403 	bic.w	r4, r4, #3
 80043dc:	42a0      	cmp	r0, r4
 80043de:	d0e3      	beq.n	80043a8 <_malloc_r+0x64>
 80043e0:	1a21      	subs	r1, r4, r0
 80043e2:	4630      	mov	r0, r6
 80043e4:	f000 f82e 	bl	8004444 <_sbrk_r>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d1dd      	bne.n	80043a8 <_malloc_r+0x64>
 80043ec:	e7cf      	b.n	800438e <_malloc_r+0x4a>
 80043ee:	bf00      	nop
 80043f0:	200001b0 	.word	0x200001b0
 80043f4:	200001b4 	.word	0x200001b4

080043f8 <_realloc_r>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4607      	mov	r7, r0
 80043fc:	4614      	mov	r4, r2
 80043fe:	460e      	mov	r6, r1
 8004400:	b921      	cbnz	r1, 800440c <_realloc_r+0x14>
 8004402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004406:	4611      	mov	r1, r2
 8004408:	f7ff bf9c 	b.w	8004344 <_malloc_r>
 800440c:	b922      	cbnz	r2, 8004418 <_realloc_r+0x20>
 800440e:	f7ff ff49 	bl	80042a4 <_free_r>
 8004412:	4625      	mov	r5, r4
 8004414:	4628      	mov	r0, r5
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004418:	f000 f830 	bl	800447c <_malloc_usable_size_r>
 800441c:	42a0      	cmp	r0, r4
 800441e:	d20f      	bcs.n	8004440 <_realloc_r+0x48>
 8004420:	4621      	mov	r1, r4
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff ff8e 	bl	8004344 <_malloc_r>
 8004428:	4605      	mov	r5, r0
 800442a:	2800      	cmp	r0, #0
 800442c:	d0f2      	beq.n	8004414 <_realloc_r+0x1c>
 800442e:	4631      	mov	r1, r6
 8004430:	4622      	mov	r2, r4
 8004432:	f7ff ff0f 	bl	8004254 <memcpy>
 8004436:	4631      	mov	r1, r6
 8004438:	4638      	mov	r0, r7
 800443a:	f7ff ff33 	bl	80042a4 <_free_r>
 800443e:	e7e9      	b.n	8004414 <_realloc_r+0x1c>
 8004440:	4635      	mov	r5, r6
 8004442:	e7e7      	b.n	8004414 <_realloc_r+0x1c>

08004444 <_sbrk_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4d06      	ldr	r5, [pc, #24]	; (8004460 <_sbrk_r+0x1c>)
 8004448:	2300      	movs	r3, #0
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	f7fc fe3c 	bl	80010cc <_sbrk>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_sbrk_r+0x1a>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_sbrk_r+0x1a>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	2000024c 	.word	0x2000024c

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__malloc_lock+0x8>)
 8004466:	f000 b811 	b.w	800448c <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	20000254 	.word	0x20000254

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_unlock+0x8>)
 8004472:	f000 b80c 	b.w	800448e <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	20000254 	.word	0x20000254

0800447c <_malloc_usable_size_r>:
 800447c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004480:	1f18      	subs	r0, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbc      	itt	lt
 8004486:	580b      	ldrlt	r3, [r1, r0]
 8004488:	18c0      	addlt	r0, r0, r3
 800448a:	4770      	bx	lr

0800448c <__retarget_lock_acquire_recursive>:
 800448c:	4770      	bx	lr

0800448e <__retarget_lock_release_recursive>:
 800448e:	4770      	bx	lr

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
